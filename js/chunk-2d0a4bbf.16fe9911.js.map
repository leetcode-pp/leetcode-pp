{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"names":["bounded","text","identifierStart","identifierContinue","identifier","keywords","namedLiterals","nonCommentWs","numericLiteral","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"mappings":"kHAAA,qFAEA,IAAIA,EAAU,SAAUC,GAAQ,MAAO,MAAQA,EAAO,OAClDC,EAAkB,YAClBC,EAAqB,eACrBC,EAAaJ,EAAQ,GAAKE,EAAkBC,EAAqB,KACjEE,EAAW,CACX,cACA,WACA,SACA,QACA,MACA,SACA,MACA,KACA,KACA,YAEAC,EAAgB,CAAC,OAAQ,QAAS,QAClCC,EAAe,eACfC,EAAiB,SACVC,EAAO,CACdC,SAAU,CACNC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEzBC,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,MAAOC,MAAO,QAE1BC,iBAAkB,CACd,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,IAAKE,MAAO,CAAC,SAAU,YAC3C,CAAEH,KAAM,MAAOC,MAAO,MAAOE,MAAO,CAAC,SAAU,aAEnDC,gBAAiB,gBACjBC,iBAAkB,CACdC,sBAAuB,IAAIC,OAAO,8DAClCC,sBAAuB,IAAID,OAAO,4CAG/BE,EAAW,CAClBC,aAAc,GACdC,aAAc,SACdb,SAAU,CACN,CAAEE,KAAM,IAAKC,MAAO,IAAKW,MAAO,mBAChC,CAAEZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,oBAChC,CAAEZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,0BAEpCC,QAAS,sBACTvB,SAAUA,EACVC,cAAeA,EACfuB,QAAS,0CACTC,UAAW,CACPC,KAAM,CAAC,CAAEC,QAAS,eAAiB,CAAEA,QAAS,gBAC9CC,eAAgB,CACZ,CAAEC,MAAO,cAAeC,OAAQ,CAAER,MAAO,WACzC,CAAEO,MAAO,MAAOC,OAAQ,CAAER,MAAO,eAAgBS,KAAM,UAE3DC,cAAe,CACX,CAAEH,MAAO,OAAQC,OAAQ,CAAER,MAAO,oBAAqBS,KAAM,qBAC7D,CAAEF,MAAO,aAAcC,OAAQ,CAAER,MAAO,WACxC,CAAEO,MAAO,WAAYC,OAAQ,CAAER,MAAO,kBACtC,CAAEO,MAAO,QAASC,OAAQ,CAAER,MAAO,0BACnC,CAAEO,MAAO,IAAKC,OAAQ,CAAER,MAAO,SAAUS,KAAM,UAEnDE,gBAAiB,CACb,CAAEJ,MAAO,IAAKC,OAAQ,CAAER,MAAO,oBAAqBS,KAAM,qBAC1D,CAAEF,MAAO,IAAKC,OAAQ,CAAER,MAAO,oBAAqBS,KAAM,SAC1D,CAAEJ,QAAS,eAEfO,QAAS,CACL,CAAEL,MAAO,UAAWC,OAAQ,CAAER,MAAO,YACrC,CAAEO,MAAO,SAAUC,OAAQ,CAAER,MAAO,UAAWS,KAAM,SACrD,CAAEF,MAAO,SAAUC,OAAQ,CAAER,MAAO,aAExCa,WAAY,CACR,CAAEN,MAAO3B,GACT,CAAE2B,MAAO,SAAUC,OAAQ,CAAER,MAAO,UAAWS,KAAM,aACrD,CAAEF,MAAO,YAAaC,OAAQ,CAAER,MAAO,aAE3Cc,WAAY,CACR,CAAEP,MAAO,MAAOC,OAAQ,CAAER,MAAO,eAAgBS,KAAM,oBACvD,CAAEF,MAAO,IAAKC,OAAQ,CAAER,MAAO,eAAgBS,KAAM,mBACrD,CAAEF,MAAO1B,EAAgB2B,OAAQ,CAAER,MAAO,WAC1C,CACIO,MAAO9B,EACP+B,OAAQ,CACJO,MAAO,CACH,YAAa,CAAEf,MAAO,WACtB,iBAAkB,CAAEA,MAAO,WAC3B,WAAY,CAAEA,MAAO","file":"js/chunk-2d0a4bbf.16fe9911.js","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar bounded = function (text) { return \"\\\\b\" + text + \"\\\\b\"; };\nvar identifierStart = '[_a-zA-Z]';\nvar identifierContinue = '[_a-zA-Z0-9]';\nvar identifier = bounded(\"\" + identifierStart + identifierContinue + \"*\");\nvar keywords = [\n    'targetScope',\n    'resource',\n    'module',\n    'param',\n    'var',\n    'output',\n    'for',\n    'in',\n    'if',\n    'existing'\n];\nvar namedLiterals = ['true', 'false', 'null'];\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\nvar numericLiteral = \"[0-9]+\";\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: \"'\", close: \"'\" },\n        { open: \"'''\", close: \"'''\" }\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\n        { open: \"'''\", close: \"'''\", notIn: ['string', 'comment'] }\n    ],\n    autoCloseBefore: \":.,=}])' \\n\\t\",\n    indentationRules: {\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.bicep',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\n    ],\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\n    keywords: keywords,\n    namedLiterals: namedLiterals,\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\n    tokenizer: {\n        root: [{ include: '@expression' }, { include: '@whitespace' }],\n        stringVerbatim: [\n            { regex: \"(|'|'')[^']\", action: { token: 'string' } },\n            { regex: \"'''\", action: { token: 'string.quote', next: '@pop' } }\n        ],\n        stringLiteral: [\n            { regex: \"\\\\${\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\n            { regex: \"[^\\\\\\\\'$]+\", action: { token: 'string' } },\n            { regex: '@escapes', action: { token: 'string.escape' } },\n            { regex: \"\\\\\\\\.\", action: { token: 'string.escape.invalid' } },\n            { regex: \"'\", action: { token: 'string', next: '@pop' } }\n        ],\n        bracketCounting: [\n            { regex: \"{\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\n            { regex: \"}\", action: { token: 'delimiter.bracket', next: '@pop' } },\n            { include: 'expression' }\n        ],\n        comment: [\n            { regex: \"[^\\\\*]+\", action: { token: 'comment' } },\n            { regex: \"\\\\*\\\\/\", action: { token: 'comment', next: '@pop' } },\n            { regex: \"[\\\\/*]\", action: { token: 'comment' } }\n        ],\n        whitespace: [\n            { regex: nonCommentWs },\n            { regex: \"\\\\/\\\\*\", action: { token: 'comment', next: '@comment' } },\n            { regex: \"\\\\/\\\\/.*$\", action: { token: 'comment' } }\n        ],\n        expression: [\n            { regex: \"'''\", action: { token: 'string.quote', next: '@stringVerbatim' } },\n            { regex: \"'\", action: { token: 'string.quote', next: '@stringLiteral' } },\n            { regex: numericLiteral, action: { token: 'number' } },\n            {\n                regex: identifier,\n                action: {\n                    cases: {\n                        '@keywords': { token: 'keyword' },\n                        '@namedLiterals': { token: 'keyword' },\n                        '@default': { token: 'identifier' }\n                    }\n                }\n            }\n        ]\n    }\n};\n"],"sourceRoot":""}