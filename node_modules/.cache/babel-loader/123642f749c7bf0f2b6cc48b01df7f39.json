{"remainingRequest":"/Users/luxiaopeng/github/leetcode-pp/node_modules/thread-loader/dist/cjs.js!/Users/luxiaopeng/github/leetcode-pp/node_modules/babel-loader/lib/index.js!/Users/luxiaopeng/github/leetcode-pp/node_modules/eslint-loader/index.js??ref--13-0!/Users/luxiaopeng/github/leetcode-pp/src/utils/highlight-lines.js","dependencies":[{"path":"/Users/luxiaopeng/github/leetcode-pp/src/utils/highlight-lines.js","mtime":1648364288741},{"path":"/Users/luxiaopeng/github/leetcode-pp/node_modules/cache-loader/dist/cjs.js","mtime":1582876651155},{"path":"/Users/luxiaopeng/github/leetcode-pp/node_modules/thread-loader/dist/cjs.js","mtime":1582876651885},{"path":"/Users/luxiaopeng/github/leetcode-pp/node_modules/babel-loader/lib/index.js","mtime":1614915260754},{"path":"/Users/luxiaopeng/github/leetcode-pp/node_modules/eslint-loader/index.js","mtime":1584094539526}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Vc2Vycy9sdXhpYW9wZW5nL2dpdGh1Yi9sZWV0Y29kZS1wcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CnZhciBSRSA9IC97KFtcZCwtXSspfS87CmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAobWQpIHsKICB2YXIgZmVuY2UgPSBtZC5yZW5kZXJlci5ydWxlcy5mZW5jZTsKCiAgbWQucmVuZGVyZXIucnVsZXMuZmVuY2UgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICB2YXIgdG9rZW5zID0gYXJnc1swXSwKICAgICAgICBpZHggPSBhcmdzWzFdLAogICAgICAgIG9wdGlvbnMgPSBhcmdzWzJdLAogICAgICAgIHNlbGYgPSBhcmdzWzRdOwogICAgdmFyIHRva2VuID0gdG9rZW5zW2lkeF07CgogICAgaWYgKCF0b2tlbi5pbmZvIHx8ICFSRS50ZXN0KHRva2VuLmluZm8pKSB7CiAgICAgIHJldHVybiBmZW5jZS5hcHBseSh2b2lkIDAsIGFyZ3MpOwogICAgfQoKICAgIHZhciBsaW5lTnVtYmVycyA9IFJFLmV4ZWModG9rZW4uaW5mbylbMV0uc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHYpIHsKICAgICAgcmV0dXJuIHYuc3BsaXQoJy0nKS5tYXAoZnVuY3Rpb24gKHYpIHsKICAgICAgICByZXR1cm4gcGFyc2VJbnQodiwgMTApOwogICAgICB9KTsKICAgIH0pOwogICAgdmFyIGxhbmdOYW1lID0gdG9rZW4uaW5mby5yZXBsYWNlKFJFLCAnJykudHJpbSgpOwogICAgdmFyIGNvZGUgPSBvcHRpb25zLmhpZ2hsaWdodCh0b2tlbi5jb250ZW50LCBsYW5nTmFtZSk7CiAgICB2YXIgcHJlZml4ID0gJzxwcmUgY2xhc3M9ImN1c3RvbSI+PGNvZGUgY2xhc3M9ImhsanMiPic7CiAgICB2YXIgc3VmZml4ID0gJzwvY29kZT48L3ByZT4nOwogICAgdmFyIGNvZGVTcGxpdHMgPSBjb2RlLnNsaWNlKHByZWZpeC5sZW5ndGgsIC1zdWZmaXgubGVuZ3RoKS5zcGxpdCgnPGJyLz4nKS5tYXAoZnVuY3Rpb24gKHNwbGl0LCBpbmRleCkgewogICAgICB2YXIgbGluZU51bWJlciA9IGluZGV4ICsgMTsgLy8gY29uc29sZS5sb2coc3BsaXQpCgogICAgICB2YXIgaW5SYW5nZSA9IGxpbmVOdW1iZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSwKICAgICAgICAgICAgc3RhcnQgPSBfcmVmMlswXSwKICAgICAgICAgICAgZW5kID0gX3JlZjJbMV07CgogICAgICAgIGlmIChzdGFydCAmJiBlbmQpIHsKICAgICAgICAgIHJldHVybiBsaW5lTnVtYmVyID49IHN0YXJ0ICYmIGxpbmVOdW1iZXIgPD0gZW5kOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGxpbmVOdW1iZXIgPT09IHN0YXJ0OwogICAgICB9KTsKCiAgICAgIGlmIChpblJhbmdlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGNvZGU6ICI8c3BhbiBjbGFzcz1cImhpZ2hsaWdodGVkLWxpbmVcIj4iLmNvbmNhdChzcGxpdCwgIjwvc3Bhbj48YnIvPiIpLAogICAgICAgICAgaGlnaGxpZ2h0ZWQ6IHRydWUKICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGNvZGU6IHNwbGl0ICsgJzxici8+JwogICAgICB9OwogICAgfSk7CiAgICB2YXIgaGlnaGxpZ2h0ZWRDb2RlID0gcHJlZml4OwogICAgY29kZVNwbGl0cy5mb3JFYWNoKGZ1bmN0aW9uIChzcGxpdCkgewogICAgICBpZiAoc3BsaXQuaGlnaGxpZ2h0ZWQpIHsKICAgICAgICBoaWdobGlnaHRlZENvZGUgKz0gc3BsaXQuY29kZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBoaWdobGlnaHRlZENvZGUgKz0gIiIuY29uY2F0KHNwbGl0LmNvZGUpOwogICAgICB9CiAgICB9KTsKICAgIGhpZ2hsaWdodGVkQ29kZSArPSBzdWZmaXg7CgogICAgLy8gSWYgY3VzdG9tIGhpZ2hsaWdodGVyIHdyYXBzIGNvZGUgd2l0aCBzdGFydGluZyA8cHJlLi4uLCBkb24ndCB3cmFwIGNvZGUKICAgIGlmIChoaWdobGlnaHRlZENvZGUuc3RhcnRzV2l0aCgnPHByZScpKSB7CiAgICAgIHJldHVybiBoaWdobGlnaHRlZENvZGU7CiAgICB9CgogICAgdmFyIHRtcFRva2VuID0gewogICAgICBhdHRyczogW1snY2xhc3MnLCBsYW5nTmFtZSA/ICJsYW5ndWFnZS0iLmNvbmNhdChsYW5nTmFtZSkgOiAnJ11dCiAgICB9OwogICAgdmFyIGF0dHJzID0gc2VsZi5yZW5kZXJBdHRycyh0bXBUb2tlbik7CiAgICByZXR1cm4gIjxwcmUiLmNvbmNhdChhdHRycywgIj48Y29kZSIpLmNvbmNhdChhdHRycywgIj4iKS5jb25jYXQoaGlnaGxpZ2h0ZWRDb2RlLnRyaW0oKSwgIjwvY29kZT48L3ByZT4iKTsKICB9Owp9KTs="},{"version":3,"sources":["/Users/luxiaopeng/github/leetcode-pp/src/utils/highlight-lines.js"],"names":["RE","md","fence","renderer","rules","args","tokens","idx","options","self","token","info","test","lineNumbers","exec","split","map","v","parseInt","langName","replace","trim","code","highlight","content","prefix","suffix","codeSplits","slice","length","index","lineNumber","inRange","some","start","end","highlighted","highlightedCode","forEach","startsWith","tmpToken","attrs","renderAttrs"],"mappings":"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","sourcesContent":["const RE = /{([\\d,-]+)}/\n\nexport default md => {\n  const fence = md.renderer.rules.fence\n  md.renderer.rules.fence = (...args) => {\n    const [tokens, idx, options, , self] = args\n    const token = tokens[idx]\n\n    if (!token.info || !RE.test(token.info)) {\n      return fence(...args)\n    }\n\n    const lineNumbers = RE.exec(token.info)[1]\n      .split(',')\n      .map(v => v.split('-').map(v => parseInt(v, 10)))\n    const langName = token.info.replace(RE, '').trim()\n\n    const code = options.highlight(token.content, langName)\n\n    const prefix = '<pre class=\"custom\"><code class=\"hljs\">'\n    const suffix = '</code></pre>'\n\n    const codeSplits = code\n      .slice(prefix.length, -suffix.length)\n      .split('<br/>')\n      .map((split, index) => {\n        const lineNumber = index + 1\n        // console.log(split)\n        const inRange = lineNumbers.some(([start, end]) => {\n          if (start && end) {\n            return lineNumber >= start && lineNumber <= end\n          }\n          return lineNumber === start\n        })\n        if (inRange) {\n          return {\n            code: `<span class=\"highlighted-line\">${split}</span><br/>`,\n            highlighted: true\n          }\n        }\n        return {\n          code: split + '<br/>'\n        }\n      })\n    let highlightedCode = prefix\n    codeSplits.forEach(split => {\n      if (split.highlighted) {\n        highlightedCode += split.code\n      } else {\n        highlightedCode += `${split.code}`\n      }\n    })\n    highlightedCode += suffix\n    console.log(highlightedCode)\n    // If custom highlighter wraps code with starting <pre..., don't wrap code\n    if (highlightedCode.startsWith('<pre')) {\n      return highlightedCode\n    }\n    const tmpToken = {\n      attrs: [['class', langName ? `language-${langName}` : '']]\n    }\n    const attrs = self.renderAttrs(tmpToken)\n    return `<pre${attrs}><code${attrs}>${highlightedCode.trim()}</code></pre>`\n  }\n}\n"]}]}