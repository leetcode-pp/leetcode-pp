{"remainingRequest":"/Users/luxiaopeng/github/leetcode-pp/node_modules/thread-loader/dist/cjs.js!/Users/luxiaopeng/github/leetcode-pp/node_modules/babel-loader/lib/index.js!/Users/luxiaopeng/github/leetcode-pp/node_modules/eslint-loader/index.js??ref--13-0!/Users/luxiaopeng/github/leetcode-pp/src/utils/markdown-it-imageflow.js","dependencies":[{"path":"/Users/luxiaopeng/github/leetcode-pp/src/utils/markdown-it-imageflow.js","mtime":1648364288743},{"path":"/Users/luxiaopeng/github/leetcode-pp/node_modules/cache-loader/dist/cjs.js","mtime":1582876651155},{"path":"/Users/luxiaopeng/github/leetcode-pp/node_modules/thread-loader/dist/cjs.js","mtime":1582876651885},{"path":"/Users/luxiaopeng/github/leetcode-pp/node_modules/babel-loader/lib/index.js","mtime":1614915260754},{"path":"/Users/luxiaopeng/github/leetcode-pp/node_modules/eslint-loader/index.js","mtime":1584094539526}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Vc2Vycy9sdXhpYW9wZW5nL2dpdGh1Yi9sZWV0Y29kZS1wcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKCi8qIGVzbGludC1kaXNhYmxlICAqLwp2YXIgZGVmYXVsdE9wdGlvbiA9IHsKICBsaW1pdGxlc3M6IGZhbHNlLAogIC8vIOmZkOWItuWbvueJh+aVsOmHjwogIGxpbWl0OiAxMCAvLyDlm77niYfmlbDph4/kuIrpmZAKCn07Cgp2YXIgaW1hZ2VGbG93UGx1Z2luID0gZnVuY3Rpb24gaW1hZ2VGbG93UGx1Z2luKG1kLCBvcHQpIHsKICB2YXIgb3B0aW9ucyA9IG9wdCB8fCBkZWZhdWx0T3B0aW9uOwoKICB2YXIgdG9rZW5pemUgPSBmdW5jdGlvbiB0b2tlbml6ZShzdGF0ZSwgc3RhcnQpIHsKICAgIHZhciB0b2tlbjsKICAgIHZhciBtYXRjaFJlZyA9IC9ePCgoIVxbW15bXF1dKlxdXChbXigpXStcKSgsP1xzKig/PT4pfCxccyooPyE+KSkpKyk+LzsKICAgIHZhciBzcmNMaW5lID0gc3RhdGUuc3JjLnNsaWNlKHN0YXRlLmJNYXJrc1tzdGFydF0sIHN0YXRlLmVNYXJrc1tzdGFydF0pOwoKICAgIGlmIChzcmNMaW5lLmNoYXJDb2RlQXQoMCkgIT09IDB4M2MKICAgIC8qIDwgKi8KICAgICkgewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgdmFyIG1hdGNoID0gbWF0Y2hSZWcuZXhlYyhzcmNMaW5lKTsKCiAgICBpZiAobWF0Y2gpIHsKICAgICAgdmFyIGltYWdlcyA9IG1hdGNoWzFdLm1hdGNoKC9cW1teXF1dKlxdXChbXildK1wpL2cpOwoKICAgICAgaWYgKCFvcHRpb25zLmxpbWl0bGVzcyAmJiBpbWFnZXMubGVuZ3RoIDw9IG9wdGlvbnMubGltaXQpIHsKICAgICAgICB0b2tlbiA9IHN0YXRlLnB1c2goJ2ltYWdlRmxvdycsICcnLCAwKTsKICAgICAgICB0b2tlbi5tZXRhID0gaW1hZ2VzOwogICAgICAgIHRva2VuLmJsb2NrID0gdHJ1ZTsgLy8gdXBkYXRlIGxpbmUKCiAgICAgICAgc3RhdGUubGluZSsrOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwogIH07CgogIG1kLnJlbmRlcmVyLnJ1bGVzLmltYWdlRmxvdyA9IGZ1bmN0aW9uICh0b2tlbnMsIGlkeCkgewogICAgdmFyIHN0YXJ0ID0gJzxzZWN0aW9uIGNsYXNzPSJpbWFnZWZsb3ctbGF5ZXIxIj48c2VjdGlvbiBjbGFzcz0iaW1hZ2VmbG93LWxheWVyMiI+JzsKICAgIHZhciBlbmQgPSAnPC9zZWN0aW9uPjwvc2VjdGlvbj48cCBjbGFzcz0iaW1hZ2VmbG93LWNhcHRpb24iPjw8PCDlt6blj7Pmu5Hliqjop4Hmm7TlpJogPj4+PC9wPic7CiAgICB2YXIgY29udGVudHMgPSB0b2tlbnNbaWR4XS5tZXRhOwogICAgdmFyIHdyYXBwZWRDb250ZW50ID0gJyc7CiAgICB2YXIgYWx0OwogICAgdmFyIHNyYzsKICAgIGNvbnRlbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRlbnQpIHsKICAgICAgOwoKICAgICAgdmFyIF9jb250ZW50JG1hdGNoID0gY29udGVudC5tYXRjaCgvXFsoW15bXF1dKilcXS8pOwoKICAgICAgdmFyIF9jb250ZW50JG1hdGNoMiA9IF9zbGljZWRUb0FycmF5KF9jb250ZW50JG1hdGNoLCAyKTsKCiAgICAgIGFsdCA9IF9jb250ZW50JG1hdGNoMlsxXTsKCiAgICAgIHZhciBfY29udGVudCRtYXRjaDMgPSBjb250ZW50Lm1hdGNoKC9bXltdKlwoKFteKCldKilcKVteXF1dKi8pOwoKICAgICAgdmFyIF9jb250ZW50JG1hdGNoNCA9IF9zbGljZWRUb0FycmF5KF9jb250ZW50JG1hdGNoMywgMik7CgogICAgICBzcmMgPSBfY29udGVudCRtYXRjaDRbMV07CiAgICAgIHdyYXBwZWRDb250ZW50ICs9ICI8c2VjdGlvbiBjbGFzcz1cImltYWdlZmxvdy1sYXllcjNcIj48aW1nIGFsdD1cIiIuY29uY2F0KGFsdCwgIlwiIHNyYz1cIiIpLmNvbmNhdChzcmMsICJcIiBjbGFzcz1cImltYWdlZmxvdy1pbWdcIiAvPjwvc2VjdGlvbj4iKTsKICAgIH0pOwogICAgcmV0dXJuIHN0YXJ0ICsgd3JhcHBlZENvbnRlbnQgKyBlbmQ7CiAgfTsKCiAgbWQuYmxvY2sucnVsZXIuYmVmb3JlKCdwYXJhZ3JhcGgnLCAnaW1hZ2VGbG93JywgdG9rZW5pemUpOwp9OwoKZXhwb3J0IGRlZmF1bHQgaW1hZ2VGbG93UGx1Z2luOw=="},{"version":3,"sources":["/Users/luxiaopeng/github/leetcode-pp/src/utils/markdown-it-imageflow.js"],"names":["defaultOption","limitless","limit","imageFlowPlugin","md","opt","options","tokenize","state","start","token","matchReg","srcLine","src","slice","bMarks","eMarks","charCodeAt","match","exec","images","length","push","meta","block","line","renderer","rules","imageFlow","tokens","idx","end","contents","wrappedContent","alt","forEach","content","ruler","before"],"mappings":";;;;;;;AAAA;AACA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE,KADS;AACF;AAClBC,EAAAA,KAAK,EAAE,EAFa,CAEV;;AAFU,CAAtB;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD,EAAKC,GAAL,EAAa;AACnC,MAAMC,OAAO,GAAGD,GAAG,IAAIL,aAAvB;;AAEA,MAAMO,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,KAAR,EAAkB;AACjC,QAAIC,KAAJ;AAEA,QAAMC,QAAQ,GAAG,sDAAjB;AACA,QAAMC,OAAO,GAAGJ,KAAK,CAACK,GAAN,CAAUC,KAAV,CAAgBN,KAAK,CAACO,MAAN,CAAaN,KAAb,CAAhB,EAAqCD,KAAK,CAACQ,MAAN,CAAaP,KAAb,CAArC,CAAhB;;AAEA,QAAIG,OAAO,CAACK,UAAR,CAAmB,CAAnB,MAA0B;AAAK;AAAnC,MAA4C;AAC1C,aAAO,KAAP;AACD;;AACD,QAAMC,KAAK,GAAGP,QAAQ,CAACQ,IAAT,CAAcP,OAAd,CAAd;;AAEA,QAAIM,KAAJ,EAAW;AACT,UAAME,MAAM,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASA,KAAT,CAAe,sBAAf,CAAf;;AACA,UAAI,CAACZ,OAAO,CAACL,SAAT,IAAsBmB,MAAM,CAACC,MAAP,IAAiBf,OAAO,CAACJ,KAAnD,EAA0D;AACxDQ,QAAAA,KAAK,GAAGF,KAAK,CAACc,IAAN,CAAW,WAAX,EAAwB,EAAxB,EAA4B,CAA5B,CAAR;AACAZ,QAAAA,KAAK,CAACa,IAAN,GAAaH,MAAb;AACAV,QAAAA,KAAK,CAACc,KAAN,GAAc,IAAd,CAHwD,CAKxD;;AACAhB,QAAAA,KAAK,CAACiB,IAAN;AACA,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAxBD;;AA0BArB,EAAAA,EAAE,CAACsB,QAAH,CAAYC,KAAZ,CAAkBC,SAAlB,GAA8B,UAACC,MAAD,EAASC,GAAT,EAAiB;AAC7C,QAAMrB,KAAK,GACT,sEADF;AAEA,QAAMsB,GAAG,GACP,sEADF;AAEA,QAAMC,QAAQ,GAAGH,MAAM,CAACC,GAAD,CAAN,CAAYP,IAA7B;AACA,QAAIU,cAAc,GAAG,EAArB;AACA,QAAIC,GAAJ;AACA,QAAIrB,GAAJ;AACAmB,IAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAAC,OAAO,EAAI;AAC1B;;AAD0B,2BACfA,OAAO,CAAClB,KAAR,CAAc,eAAd,CADe;;AAAA;;AACtBgB,MAAAA,GADsB;;AAAA,4BAEfE,OAAO,CAAClB,KAAR,CAAc,yBAAd,CAFe;;AAAA;;AAEtBL,MAAAA,GAFsB;AAG1BoB,MAAAA,cAAc,6DAAmDC,GAAnD,sBAAgErB,GAAhE,4CAAd;AACD,KAJD;AAMA,WAAOJ,KAAK,GAAGwB,cAAR,GAAyBF,GAAhC;AACD,GAhBD;;AAkBA3B,EAAAA,EAAE,CAACoB,KAAH,CAASa,KAAT,CAAeC,MAAf,CAAsB,WAAtB,EAAmC,WAAnC,EAAgD/B,QAAhD;AACD,CAhDD;;AAkDA,eAAeJ,eAAf","sourcesContent":["/* eslint-disable  */\nconst defaultOption = {\n  limitless: false, // 限制图片数量\n  limit: 10 // 图片数量上限\n}\n\nconst imageFlowPlugin = (md, opt) => {\n  const options = opt || defaultOption\n\n  const tokenize = (state, start) => {\n    let token\n\n    const matchReg = /^<((!\\[[^[\\]]*\\]\\([^()]+\\)(,?\\s*(?=>)|,\\s*(?!>)))+)>/\n    const srcLine = state.src.slice(state.bMarks[start], state.eMarks[start])\n\n    if (srcLine.charCodeAt(0) !== 0x3c /* < */) {\n      return false\n    }\n    const match = matchReg.exec(srcLine)\n\n    if (match) {\n      const images = match[1].match(/\\[[^\\]]*\\]\\([^)]+\\)/g)\n      if (!options.limitless && images.length <= options.limit) {\n        token = state.push('imageFlow', '', 0)\n        token.meta = images\n        token.block = true\n\n        // update line\n        state.line++\n        return true\n      }\n    }\n    return false\n  }\n\n  md.renderer.rules.imageFlow = (tokens, idx) => {\n    const start =\n      '<section class=\"imageflow-layer1\"><section class=\"imageflow-layer2\">'\n    const end =\n      '</section></section><p class=\"imageflow-caption\"><<< 左右滑动见更多 >>></p>'\n    const contents = tokens[idx].meta\n    let wrappedContent = ''\n    let alt\n    let src\n    contents.forEach(content => {\n      ;[, alt] = content.match(/\\[([^[\\]]*)\\]/)\n      ;[, src] = content.match(/[^[]*\\(([^()]*)\\)[^\\]]*/)\n      wrappedContent += `<section class=\"imageflow-layer3\"><img alt=\"${alt}\" src=\"${src}\" class=\"imageflow-img\" /></section>`\n    })\n\n    return start + wrappedContent + end\n  }\n\n  md.block.ruler.before('paragraph', 'imageFlow', tokenize)\n}\n\nexport default imageFlowPlugin\n"]}]}